on run argv

  -- initialization
  set myradio to item 1 of argv
  log "Version 26 for " & myradio
  set myfile to "/Users/gmazzini/Library/Application Support/WSJT-X - " & myradio & "/wsjtx_log.adi"
  set myprocess to "wsjtx_" & myradio

  tell application "System Events" to tell process myprocess
    set mywins to name of windows
    repeat with aa from 1 to length of mywins
      set mya1 to text item aa of mywins
      if "K1JT" is in mya1 then
        set myidwin to aa
        exit repeat
      end if
    end repeat
    set mymain to text item myidwin of mywins
    
    set mytx6 to radio button 3 of group 1 of group 1 of window mymain
    
    repeat
      if (value of attribute "AXValue" of mytx6) is equal to 1 then
  
        -- read the log
        set fhh to open for access myfile
        set myallrows to paragraphs of (read fhh)
        close access fhh
        set myrows to count myallrows
  
        -- process the log
        set listcall to {}
        repeat
          set myrow to item myrows of myallrows as text
          set myel to offset of "<call:" in myrow
          if myel greater than 0 then
            set myaux to myel-2+(offset of ">" in (text myel thru -1 of myrow))
            set mycalllen to text (myel+6) thru myaux of myrow
            set mycall to text (myaux+2) thru (myaux+mycalllen+1) of myrow
            set myel to offset of "<freq:" in myrow
            set myaux to myel-2+(offset of ">" in (text myel thru -1 of myrow))
            set myfreqlen to text (myel+6) thru myaux of myrow
            set myfreq to text (myaux+2) thru (myaux+myfreqlen+1) of myrow
            set mymhz to text 1 thru ((offset of "." in myfreq)-1) of myfreq
            set myexit to 0
            repeat with i from 1 to (count of listcall)
              if (call of item i of listcall is equal to mycall) and (mhz of item i of listcall is equal to mymhz) then
                set myexit to i 
                exit repeat
              end if
            end repeat
            if myexit is equal to 0 then
              copy {call:mycall, mhz:mymhz} to the end of listcall
            end if
          end if
          set myrows to myrows-1
          if myrows is 0 then exit repeat
        end repeat

        -- read the band activity
        set myframe to text area 2 of splitter group 1 of window mymain
        set mytext to value of attribute "AXValue" of myframe
        set mylist to paragraphs of mytext
        set mylen to count mylist

        -- identity the transmitting frequency
        set myfreqrun to "0"
        set jj to mylen
        repeat
          set myitem to item jj of mylist as text
          set mymsg to text 25 thru -1 of myitem
          if mymsg starts with "-----" then
            set myband to text from (1+(offset of " " in mymsg)) thru -2 of mymsg
            if myband is equal to "160" then set myfreqrun to "1"
            if myband is equal to "80" then set myfreqrun to "3"
            if myband is equal to "60" then set myfreqrun to "5"
            if myband is equal to "40" then set myfreqrun to "7"
            if myband is equal to "30" then set myfreqrun to "10"
            if myband is equal to "20" then set myfreqrun to "14"
            if myband is equal to "17" then set myfreqrun to "18"
            if myband is equal to "15" then set myfreqrun to "21"
            if myband is equal to "12" then set myfreqrun to "24"
            if myband is equal to "10" then set myfreqrun to "28"
            if myband is equal to "6" then set myfreqrun to "50"
            if myband is equal to "2" then set myfreqrun to "144"
            exit repeat
          end if
          set jj to jj-1
          if jj is 0 then exit repeat
        end repeat
        
        -- process the band activity and extract cq calls
        set cqcall to {}
        set UTC to ((current date) - (time to GMT)) as text
        set myutc to text ((offset of "at " in UTC)+3) thru -1 of UTC
        set jj to mylen
        repeat
          set myitem to item jj of mylist as text
          set mymsg to text 25 thru -1 of myitem
          if mymsg starts with "-----" then exit repeat
          set mytax to text 1 thru 6 of mymsg
          set mysutc to ((text 1 thru 2 of myutc)*60+(text 4 thru 5 of myutc))*60+(text 7 thru 8 of myutc)
          set mystax to ((text 1 thru 2 of mytax)*60+(text 3 thru 4 of mytax))*60+(text 5 thru 6 of mytax)
          if (text 1 thru 2 of myutc) is less than (text 1 thru 2 of mytax) then
            set mysdiff to mysutc+24*3600-mystax
          else 
            set mysdiff to mysutc-mystax
          end if          
          if mymsg starts with "CQ " and mysdiff is less than 300 then
            set myen0 to 2
            set myen1 to myen0+(offset of " " in (text (2+myen0) thru -1 of mymsg))
            set mycall to text from (2+myen0) thru myen1 of mymsg
            set lenmycall to (get count of characters in mycall)            
            set mydig to 0
            repeat with zz from 1 to lenmycall
              set xx to item zz of mycall
              if xx is in "1234567890" then set mydig to mydig+1
            end repeat
            if mydig is equal to 0 then
              set myen2 to myen1+(offset of " " in (text (2+myen1) thru -1 of mymsg))
              set mycall to text from (2+myen1) thru myen2 of mymsg
            end if
            set myexit to 0
            repeat with i from 1 to (count of listcall)
              if (call of item i of listcall is equal to mycall) and (mhz of item i of listcall is equal to myfreqrun) then
                set myexit to i
                exit repeat
              end if
            end repeat
            if myexit is equal to 0 then
              set mysig to text 8 thru 10 of myitem
              set myfreq to text 17 thru 20 of myitem
              copy {call:mycall, freq:myfreq, sig:mysig} to the end of cqcall      
            end if
          end if
          set jj to jj-1
          if jj is 0 then exit repeat
        end repeat

        -- sort the cq calls
        repeat
          set myswap to 0
          repeat with i from 1 to ((count of cqcall)-1)
            if sig of item (i+1) of cqcall < sig of item i of cqcall then
              set temp to item i of cqcall
              set item i of cqcall to item (i+1) of cqcall
              set item (i+1) of cqcall to temp
              set myswap to myswap+1
            end if
          end repeat
          if myswap is equal to 0 then exit repeat
        end repeat

        -- select the call 
        set mylim to count cqcall
        if mylim is greater than 0 then
          if mylim is greater than 3 then set mylim to 3
          set mysel to random number from 1 to mylim
          set UTC to ((current date) - (time to GMT)) as text
          set myutc to text ((offset of "at " in UTC)+3) thru -1 of UTC
          log myutc & " " &(call of item mysel of cqcall) & " " & (sig of item mysel of cqcall) & " " & (freq of item mysel of cqcall)

          -- set call rxfreq rxsig
          set value of text field "DX Call" of window mymain to (call of item mysel of cqcall)
          set rxfreq to incrementor 2 of group 1 of window mymain
          tell rxfreq
            set p to position
            set s to size
            set xx to (item 1 of p) + (item 1 of s) -4
            set yy to (item 2 of p) + (item 2 of s) / 2
            do shell script "/Users/gmazzini/Desktop/scriptclick/MouseTools -doubleLeftClick -x " & xx & " -y " & yy
            key code 51
            keystroke (sig of item mysel of cqcall)
          end tell
          set rxsig to incrementor 1 of group 1 of window mymain
          tell rxsig
            set p to position
            set s to size
            set xx to (item 1 of p) + (item 1 of s) -4
            set yy to (item 2 of p) + (item 2 of s) / 2
            do shell script "/Users/gmazzini/Desktop/scriptclick/MouseTools -doubleLeftClick -x " & xx & " -y " & yy
            key code 51
            keystroke (freq of item mysel of cqcall)
          end tell  

          -- set TX1
          set mytx1 to button "Tx 1" of group 1 of group 1 of window mymain
          click mytx1

        end if
      end if
      delay 60
    end repeat
  end tell
end run
